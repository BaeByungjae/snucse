  .pos 0
init:
  irmovl    Stack, %esp
  irmovl    Stack, %ebp
  call      main
  halt


main:
  pushl     %ebp
  rrmovl    %esp, %ebp

  irmovl    $3, %ecx            # pushl   $3
  pushl     %ecx                # (2)
  irmovl    dest, %ebx          # pushl   dest
  pushl     %ebx                # (2)
  irmovl    src, %eax           # pushl   src
  pushl     %eax                # (2)
  call      copy_block

  leave
  ret


copy_block:
  pushl     %ebp
  rrmovl      %esp, %ebp

  irmovl    $16, %eax           # subl      $16, %esp
  subl      %eax, %esp          # (2)
  irmovl    $0, %eax            # movl      $0, -8(%ebp)
  rmmovl    %eax, -8(%ebp)      # (2)
  jmp       L2
L3:
  mrmovl    8(%ebp), %eax
  irmovl    $4, %edx            # leal      4(%eax), %edx
  addl      %eax, %edx          # (2)
  rmmovl    %edx, 8(%ebp)
  mrmovl    (%eax), %eax
  rmmovl    %eax, -4(%ebp)
  mrmovl    12(%ebp), %eax
  irmovl    $4, %edx            # leal      4(%eax), %edx
  addl      %eax, %edx          # (2)
  rmmovl    %edx, 12(%ebp)
  mrmovl    -4(%ebp), %edx
  rmmovl    %edx, (%eax)
  mrmovl    -4(%ebp), %eax
  mrmovl    -8(%ebp), %ebx      # xorl      %eax, -8(%ebp)
  xorl      %eax, %ebx          # (2)
  rmmovl    %ebx, -8(%ebp)      # (3)
  irmovl    $1, %eax            # subl      $1, 16(%ebp)
  mrmovl    16(%ebp), %ebx      # (2)
  subl      %eax, %ebx          # (3)
  rmmovl    %ebx, 16(%ebp)      # (4)
L2:
  irmovl    $0, %eax            # cmpl      $0, 16(%ebp)
  mrmovl    16(%ebp), %ebx      # (2)
  subl      %eax, %ebx          # (3)
  jg        L3
  mrmovl    -8(%ebp), %eax

  leave
  ret


.align 4
# Source block
src:
  .long 0x00a
  .long 0x0b0
  .long 0xc00
# Destination block
dest:
  .long 0x111
  .long 0x222
  .long 0x333

  .pos 0x1000
Stack:
